・実行結果
UAF
heap base : 0x7f4e76a3b5f0
libc base : 0x7f4e768500e0

Uninitialized
heap base : 0x7f4e76a3b5f0
libc base : 0x7f4e768500e0

・解説
このコードは、glibcのmallocの実装（ptmalloc）に関する知識を活用して、ヒープやlibcのアドレスをリークするデモです。
攻撃視点でのUse-After-Free（UAF）やUninitializedヒープの挙動を利用して、heap baseやlibc baseの推定ができるかを確かめています。

🔍 ファイルごとの解説
◆ malloc_struct.h

glibcのmalloc_chunk構造体（ptmallocで使われる内部構造）の擬似定義です。

typedef struct malloc_chunk {
  size_t prev_size; // 前のチャンクのサイズ（未使用時）
  size_t size;      // このチャンクのサイズとフラグ（in-use など）

  union {
    struct {
      struct malloc_chunk* fd; // free list上の前後ポインタ
      struct malloc_chunk* bk;
      struct malloc_chunk* fd_nextsize; // large bin用
      struct malloc_chunk* bk_nextsize;
    };
    char mem[0x20]; // サイズ合わせ。fd/bk等は最大0x20バイト
  };
} malloc_chunk;

マクロ:

#define chunk2mem(p)   ((void*)(p)+0x10)
#define mem2chunk(mem) ((malloc_chunk*)((void*)(mem)-0x10))

チャンクのuser領域とchunkヘッダとの相互変換用。glibcでは、チャンクヘッダはユーザ領域の直前（通常16バイト前）にあります。
◆ attack_leak.c

ヒープのチャンク操作を通じてheap baseとlibc baseを推定する実験コードです。
【前半の動作】

ma = malloc(MALLOC_SIZE);  // チャンクA確保
ca = mem2chunk(ma);        // チャンクAのヘッダを得る
malloc(0);                 // ※理由は後述
free(ma);                  // チャンクAをfree

// 情報リーク
printf("heap base : %p\n",   (void*)ca->bk - 0x6d0);
printf("libc base : %p\n", (void*)ca->fd - 0x60 - ofs_libc_mainarena);

    maをfreeすると、チャンクAがunsorted binに入る。

    ca->fd / ca->bkにはmain_arena構造体のアドレスが入るため、libc baseを推定できる。

    heap baseはbkから算出（この0x6d0はヒープのオフセット）。

    malloc(0)はglibcのバージョンにより重要。
    glibc 2.29以降では、free直後にmain_arenaからfd/bkが上書きされないよう最初のmallocでarenaが初期化されている必要があるため、ここでdummyのmalloc(0)をしておくと確実にarenaのアドレスがfd/bkに書き込まれるようになります。

【後半の動作】

p = malloc(MALLOC_SIZE); // 再度mallocで同じサイズ
c = mem2chunk(p);

// 情報リーク（Uninitialized利用）

    freeした直後に同じサイズでmallocすると、同じチャンクが再利用される。

    malloc_chunk構造体のfd/bkは上書きされず残っていることが多いため、初期化されないままのデータがそのまま使える。

    この現象をUninitialized memory leakと呼び、セキュリティ的には深刻な情報漏洩要因になります。

🧠 攻撃的意義

このような技術はCTFや実践的なヒープエクスプロイトで重要です：

    libc baseが分かれば、systemや__free_hookなどのアドレスが特定できる

    heap baseが分かれば、ヒープスプレーやfake chunkなどが可能に

🔚 まとめ
項目	内容
malloc_struct.h	glibc malloc のチャンク構造体を模倣した定義
malloc(0)	arena初期化のため。fd/bkにlibcのポインタが入るようにする
ca->fd / ca->bk	main_arenaのアドレスを含み、libc baseの推定に使える
Uninitialized	初期化されないヒープ領域の再利用により情報がリークする
オフセット	0x6d0や0x60はglibcのバージョン依存で調整が必要

必要なら、glibcヒープ構造の図解やmain_arenaのバイナリ上の様子も補足できます。
Let me know if you'd like a heap structure diagram or glibc arena layout explanation。
